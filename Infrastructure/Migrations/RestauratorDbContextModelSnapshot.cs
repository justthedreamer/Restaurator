// <auto-generated />
using System;
using Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RestauratorDbContext))]
    partial class RestauratorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.FinancesModel.Receipt", b =>
                {
                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReceiptId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Core.Model.FinancesModel.ReceiptRow", b =>
                {
                    b.Property<Guid>("ReceiptRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DefaultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RECEIPT ROW TYPE")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("ReceiptRowId");

                    b.ToTable("ReceiptRows");

                    b.HasDiscriminator<string>("RECEIPT ROW TYPE").HasValue("ReceiptRow");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Model.MenuModel.Ingredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IngredientCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Core.Model.MenuModel.Menu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Core.Model.MenuModel.MenuItem", b =>
                {
                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrepareTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MenuItemId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Core.Model.OrderModel.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OrderMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<uint>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<uint>("OrderNumber"));

                    b.Property<string>("OrderState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PromoCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("OrderType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Model.PromoCodeModel.PromoCode", b =>
                {
                    b.Property<Guid>("PromoCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PROMO CODE TYPE")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("PromoCodeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoCodeState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<ushort>("PromoCodeValue")
                        .HasColumnType("int");

                    b.Property<string>("PromoCodeValueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromoCodeId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("PromoCodes");

                    b.HasDiscriminator<string>("PROMO CODE TYPE").HasValue("PromoCode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Model.ReservationModel.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<ushort>("CustomerCount")
                        .HasColumnType("int");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<ushort>("ReservationTime")
                        .HasColumnType("int");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservationId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TableId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Core.Model.RestaurantModel.Restaurant", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.HasIndex("MenuId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Core.Model.RestaurantModel.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<ushort>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<string>("TableSign")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TableId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TableSign")
                        .IsUnique();

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Core.Model.ScheduleModel.DailyEmployeeSchedule", b =>
                {
                    b.Property<Guid>("DailyEmployeeScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DailyScheduleDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyEmployeeScheduleId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DailyEmployeeSchedules");
                });

            modelBuilder.Entity("Core.Model.ScheduleModel.EmployeeSchedule", b =>
                {
                    b.Property<Guid>("EmployeeScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DailyEmployeeScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time");

                    b.Property<string>("ScheduleState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time");

                    b.HasKey("EmployeeScheduleId");

                    b.HasIndex("DailyEmployeeScheduleId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeSchedules");
                });

            modelBuilder.Entity("Core.Model.ServicesModel.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ServiceId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Core.Model.StaffModel.Employee", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("EmployeeLogin")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Model.StaffModel.Owner", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("IngredientMenuItem", b =>
                {
                    b.Property<Guid>("IngredientsIngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsIngredientId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("IngredientMenuItem");
                });

            modelBuilder.Entity("MenuItemOrder", b =>
                {
                    b.Property<Guid>("MenuItemsMenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuItemsMenuItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("MenuItemOrder");
                });

            modelBuilder.Entity("MenuItemPromoCode", b =>
                {
                    b.Property<Guid>("MenuItemsMenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromoCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuItemsMenuItemId", "PromoCodeId");

                    b.HasIndex("PromoCodeId");

                    b.ToTable("MenuItemPromoCode");
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServicesServiceId");

                    b.HasIndex("ServicesServiceId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("PromoCodeService", b =>
                {
                    b.Property<Guid>("PromoCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServicesServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PromoCodeId", "ServicesServiceId");

                    b.HasIndex("ServicesServiceId");

                    b.ToTable("PromoCodeService");
                });

            modelBuilder.Entity("Core.Model.FinancesModel.MenuItemReceiptRow", b =>
                {
                    b.HasBaseType("Core.Model.FinancesModel.ReceiptRow");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("ReceiptId");

                    b.HasDiscriminator().HasValue("MENU ITEM RECEIPT ROW");
                });

            modelBuilder.Entity("Core.Model.FinancesModel.ServiceReceiptRow", b =>
                {
                    b.HasBaseType("Core.Model.FinancesModel.ReceiptRow");

                    b.Property<Guid?>("ReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReceiptRows", t =>
                        {
                            t.Property("ReceiptId")
                                .HasColumnName("ServiceReceiptRow_ReceiptId");
                        });

                    b.HasDiscriminator().HasValue("SERVICE RECEIPT ROW");
                });

            modelBuilder.Entity("Core.Model.OrderModel.DeliveryOrder", b =>
                {
                    b.HasBaseType("Core.Model.OrderModel.Order");

                    b.Property<Guid?>("CourierUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CourierUserId");

                    b.HasDiscriminator().HasValue("DELIVERY ORDER");
                });

            modelBuilder.Entity("Core.Model.OrderModel.RestaurantOrder", b =>
                {
                    b.HasBaseType("Core.Model.OrderModel.Order");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TableId");

                    b.HasDiscriminator().HasValue("RESTAURANT ORDER");
                });

            modelBuilder.Entity("Core.Model.OrderModel.TakeAwayOrder", b =>
                {
                    b.HasBaseType("Core.Model.OrderModel.Order");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Orders", t =>
                        {
                            t.Property("CustomerFirstName")
                                .HasColumnName("TakeAwayOrder_CustomerFirstName");

                            t.Property("CustomerLastName")
                                .HasColumnName("TakeAwayOrder_CustomerLastName");
                        });

                    b.HasDiscriminator().HasValue("TAKE AWAY ORDER");
                });

            modelBuilder.Entity("Core.Model.PromoCodeModel.DayOfWeekPromoCode", b =>
                {
                    b.HasBaseType("Core.Model.PromoCodeModel.PromoCode");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DAY OF WEEK PROMO CODE");
                });

            modelBuilder.Entity("Core.Model.PromoCodeModel.RangeDatePromoCode", b =>
                {
                    b.HasBaseType("Core.Model.PromoCodeModel.PromoCode");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<DateOnly>("To")
                        .HasColumnType("date");

                    b.HasDiscriminator().HasValue("RANGE DATE PROMO CODE");
                });

            modelBuilder.Entity("Core.Model.PromoCodeModel.SpecificDatePromoCode", b =>
                {
                    b.HasBaseType("Core.Model.PromoCodeModel.PromoCode");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasDiscriminator().HasValue("SPECIFIC DATE PROMO CODE");
                });

            modelBuilder.Entity("Core.Model.MenuModel.MenuItem", b =>
                {
                    b.HasOne("Core.Model.MenuModel.Menu", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("Core.Model.OrderModel.Order", b =>
                {
                    b.HasOne("Core.Model.PromoCodeModel.PromoCode", "PromoCode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId");

                    b.HasOne("Core.Model.FinancesModel.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId");

                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoCode");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Core.Model.PromoCodeModel.PromoCode", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("PromoCodes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.ReservationModel.Reservation", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.RestaurantModel.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Core.Model.RestaurantModel.Restaurant", b =>
                {
                    b.HasOne("Core.Model.MenuModel.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.StaffModel.Owner", "Owner")
                        .WithMany("Restaurants")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Model.AddressModel.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RestaurantId");

                            b1.ToTable("Restaurants");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Core.ValueObject.Common.Email", "PublicEmails", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("RestaurantId", "Id");

                            b1.ToTable("Email");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.OwnsMany("Core.ValueObject.Common.PhoneNumber", "PublicPhoneNumbers", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("RestaurantId", "Id");

                            b1.ToTable("PhoneNumber");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Owner");

                    b.Navigation("PublicEmails");

                    b.Navigation("PublicPhoneNumbers");
                });

            modelBuilder.Entity("Core.Model.RestaurantModel.Table", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("Core.Model.ScheduleModel.DailyEmployeeSchedule", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("Schedules")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.ScheduleModel.EmployeeSchedule", b =>
                {
                    b.HasOne("Core.Model.ScheduleModel.DailyEmployeeSchedule", null)
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("DailyEmployeeScheduleId");

                    b.HasOne("Core.Model.StaffModel.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Model.ServicesModel.Service", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("Services")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("Core.Model.StaffModel.Employee", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Restaurant", null)
                        .WithMany("Employees")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.Model.StaffModel.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("EmployeeUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeUserId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeUserId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.StaffModel.Owner", b =>
                {
                    b.OwnsOne("Core.Model.StaffModel.Credentials", "Credentials", b1 =>
                        {
                            b1.Property<Guid>("OwnerUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OwnerUserId");

                            b1.ToTable("Owners");

                            b1.WithOwner()
                                .HasForeignKey("OwnerUserId");
                        });

                    b.Navigation("Credentials")
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientMenuItem", b =>
                {
                    b.HasOne("Core.Model.MenuModel.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.MenuModel.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuItemOrder", b =>
                {
                    b.HasOne("Core.Model.MenuModel.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsMenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.OrderModel.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuItemPromoCode", b =>
                {
                    b.HasOne("Core.Model.MenuModel.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsMenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.PromoCodeModel.PromoCode", null)
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.HasOne("Core.Model.OrderModel.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.ServicesModel.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromoCodeService", b =>
                {
                    b.HasOne("Core.Model.PromoCodeModel.PromoCode", null)
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.ServicesModel.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.FinancesModel.MenuItemReceiptRow", b =>
                {
                    b.HasOne("Core.Model.MenuModel.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Model.FinancesModel.Receipt", null)
                        .WithMany("MenuItemReceiptRows")
                        .HasForeignKey("ReceiptId");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Core.Model.FinancesModel.ServiceReceiptRow", b =>
                {
                    b.HasOne("Core.Model.FinancesModel.Receipt", null)
                        .WithMany("ServiceReceiptRows")
                        .HasForeignKey("ReceiptId");

                    b.HasOne("Core.Model.ServicesModel.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Core.Model.OrderModel.DeliveryOrder", b =>
                {
                    b.HasOne("Core.Model.StaffModel.Employee", "Courier")
                        .WithMany()
                        .HasForeignKey("CourierUserId");

                    b.OwnsOne("Core.Model.AddressModel.Address", "CustomerAddress", b1 =>
                        {
                            b1.Property<Guid>("DeliveryOrderOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HouseNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DeliveryOrderOrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryOrderOrderId");
                        });

                    b.Navigation("Courier");

                    b.Navigation("CustomerAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Model.OrderModel.RestaurantOrder", b =>
                {
                    b.HasOne("Core.Model.RestaurantModel.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Core.Model.FinancesModel.Receipt", b =>
                {
                    b.Navigation("MenuItemReceiptRows");

                    b.Navigation("ServiceReceiptRows");
                });

            modelBuilder.Entity("Core.Model.MenuModel.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Core.Model.RestaurantModel.Restaurant", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Orders");

                    b.Navigation("PromoCodes");

                    b.Navigation("Reservations");

                    b.Navigation("Schedules");

                    b.Navigation("Services");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Core.Model.ScheduleModel.DailyEmployeeSchedule", b =>
                {
                    b.Navigation("EmployeeSchedules");
                });

            modelBuilder.Entity("Core.Model.StaffModel.Owner", b =>
                {
                    b.Navigation("Restaurants");
                });
#pragma warning restore 612, 618
        }
    }
}
